{"version":3,"sources":["assets/images/welcome.gif","assets/images/peeking.gif","layouts/Header.js","layouts/DuckImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","style","headerStyle","fontFamily","fontWeight","fontSize","textAlign","marginTop","paddingBottom","width","margin","DuckImage","duckStyle","src","duck","alt","App","className","mainContainerStyle","bottomContainerStyle","peekingStyle","peekingRilakkuma","padding","position","bottom","overflow","left","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,8JCE5B,SAASC,IACpB,OACI,yBAAKC,MAAOC,GAAZ,kBAMR,IAAMA,EAAc,CAChBC,WAAa,uBACbC,WAAa,MACbC,SAAU,GACVC,UAAW,SACXC,UAAW,KACXC,cAAe,OACfC,MAAO,MACPC,OAAQ,U,gBCfG,SAASC,IACpB,OACI,yBAAKV,MAASW,GACV,yBAAKC,IAAKC,IAAMC,IAAI,aACpB,+DAKZ,IAAMH,EAAY,CACdH,MAAO,MACPC,OAAQ,SACRJ,UAAW,U,gBCOAU,MAhBf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKhB,MAASiB,EAAoBD,UAAU,iBAC1C,kBAACjB,EAAD,MACA,kBAACW,EAAD,OAEF,yBAAKV,MAAOkB,GACV,yBAAKlB,MAAOmB,GACV,yBAAKP,IAAKQ,IAAkBN,IAAI,kBASpCG,EAAqB,CACzBI,QAAS,OAGLH,EAAuB,CAC3BI,SAAU,WACVC,OAAQ,IACRC,SAAU,UAGNL,EAAe,CACnBG,SAAU,WACVG,KAAM,UCxBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCXNC,EAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,yBAA0B,iBAKzCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c54f14ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/welcome.e533d6e2.gif\";","module.exports = __webpack_public_path__ + \"static/media/peeking.75e3a72a.gif\";","import React from 'react'\n\nexport default function Header() {\n    return (\n        <div style={headerStyle}>\n            what the duck?\n        </div>\n    )\n}\n\nconst headerStyle = {\n    fontFamily : 'Nanum Myeongjo,Arial',\n    fontWeight : '400',\n    fontSize: 72,\n    textAlign: 'center',\n    marginTop: '5%',\n    paddingBottom: '50px',\n    width: \"50%\",\n    margin: \"0 auto\"\n}\n","import React from 'react'\nimport duck from '../assets/images/welcome.gif'\n\nexport default function DuckImage() {\n    return (\n        <div style = {duckStyle}>\n            <img src={duck} alt=\"welcome!\"></img>\n            <p>Currently under construction...</p>\n        </div>\n    )\n}\n\nconst duckStyle = {\n    width: \"15%\",\n    margin: \"0 auto\",\n    textAlign: \"center\"\n}\n\n","import React from 'react';\nimport './App.css';\nimport Header from './layouts/Header'\nimport DuckImage from './layouts/DuckImage'\nimport peekingRilakkuma from './assets/images/peeking.gif'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style = {mainContainerStyle} className=\"mainContainer\">\n        <Header/>\n        <DuckImage/>\n      </div>\n      <div style={bottomContainerStyle}>\n        <div style={peekingStyle} >\n          <img src={peekingRilakkuma} alt=\"peekaboo!\"></img>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst mainContainerStyle = {\n  padding: \"10%\"\n}\n\nconst bottomContainerStyle = {\n  position: \"relative\",\n  bottom: \"0\",\n  overflow: \"hidden\"\n}\n\nconst peekingStyle = {\n  position: \"relative\",\n  left: \"-124px\"\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Nanum Myeongjo:400,700', 'sans-serif']\n  }\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}